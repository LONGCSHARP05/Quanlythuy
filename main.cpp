#include<iostream>
#include<fstream>
#include<string>
#include<iomanip>
#include<vector>
#include "DMThuoc.hpp"
#include "DMChuNuoi.hpp"
#include "PhieuKhamBenh.hpp"
#include "PhieuKhamBenh.cpp"
#include "NhacLichTiem.cpp"

#include <thread>
#include <chrono>

using namespace std;

// H√†m t·∫°o hi·ªáu ·ª©ng g√µ ch·ªØ
void typingEffect(const string& text, int delay = 50) {
    for (char c : text) {
        cout << c << flush;
        this_thread::sleep_for(chrono::milliseconds(delay));
    }
}

// H√†m hi·ªÉn th·ªã banner ti√™u ƒë·ªÅ h·ªá th·ªëng
void hienThiBanner() {
    cout << R"(
   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
  ‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñà‚ñà‚ñë‚ñë‚ñë‚ñà‚ñà   ‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà  ‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë  ‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà  ‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà
 ‚ñë‚ñà‚ñà          ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñë   ‚ñà‚ñà    ‚ñë‚ñà‚ñà     ‚ñà‚ñà    ‚ñà‚ñà ‚ñë‚ñà‚ñà    ‚ñà‚ñà    ‚ñë‚ñà‚ñà
 ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë   ‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñë‚ñà‚ñà     ‚ñà‚ñà   ‚ñë‚ñà‚ñà  ‚ñà‚ñà   ‚ñë‚ñà‚ñà
 ‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë   ‚ñà‚ñà   ‚ñë‚ñà‚ñà‚ñë ‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà    ‚ñë‚ñà‚ñà     ‚ñà‚ñà   ‚ñë‚ñà‚ñà  ‚ñà‚ñà   ‚ñë‚ñà‚ñà
 ‚ñë‚ñà‚ñà      ‚ñë   ‚ñà‚ñà   ‚ñë‚ñà‚ñà‚ñë ‚ñà‚ñà   ‚ñë‚ñà‚ñà    ‚ñë‚ñà‚ñà     ‚ñà‚ñà   ‚ñë‚ñà‚ñà  ‚ñà‚ñà   ‚ñë‚ñà‚ñà
 ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë   ‚ñà‚ñà   ‚ñë‚ñà‚ñà‚ñë ‚ñà‚ñà   ‚ñë‚ñà‚ñà    ‚ñë‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë    ‚ñë‚ñë    ‚ñë‚ñë  ‚ñë‚ñë    ‚ñë‚ñë     ‚ñë‚ñë     ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë   ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë

)";
}

// H√†m hi·ªÉn th·ªã menu h·ªá th·ªëng

   
void hienThiMenu() {
cout<<   "-------------------------------------------------------------\n";
cout<<   "|         üè• H·ªÜ TH·ªêNG QU·∫¢N L√ù PH√íNG KH√ÅM TH√ö Y üê∂üê±         |\n";
cout<<   "-------------------------------------------------------------\n";
    cout << "==================================================\n";
    cout << "|  [1]  ‚ûï Nh·∫≠p th√™m d·ªØ li·ªáu m·ªõi                  |\n";
    cout << "|  [2]  üìÇ In danh s√°ch ch·ªß nu√¥i                  |\n";
    cout << "|  [3]  üíä In danh s√°ch thu·ªëc                     |\n";
    cout << "|  [4]  üìú In danh s√°ch phi·∫øu kh√°m b·ªánh           |\n";
    cout << "|  [5]  üîç T√¨m ki·∫øm phi·∫øu kh√°m b·ªánh               |\n";
    cout << "|  [6]  üí∞ Th·ªëng k√™ doanh thu                     |\n";
    cout << "|  [7]  üìà Th·ªëng k√™ thu·ªëc s·ª≠ d·ª•ng nhi·ªÅu nh·∫•t      |\n";
    cout << "|  [8]  üìù T·∫°o b√°o c√°o kh√°m b·ªánh c√° nh√¢n          |\n";
    cout << "|  [9]  üì§ Xu·∫•t phi·∫øu kh√°m b·ªánh ra file           |\n";
    cout << "|  [10] üóìÔ∏è  L·ªãch nh·∫Øc ti√™m ph√≤ng                   |\n";
    cout << "|  [0]  üö™ Tho√°t ch∆∞∆°ng tr√¨nh                     |\n";
    cout << "==================================================\n";
    cout << "üîπ Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ";
}


// H√†m hi·ªÉn th·ªã khung vi·ªÅn ƒë·ªông khi m·ªü ch∆∞∆°ng tr√¨nh
void hieuUngVien() {
    string border = "----------------------------------------------";
    for (int i = 0; i <= border.length(); i++) {
        cout << "\r" << border.substr(0, i) << flush;
        this_thread::sleep_for(chrono::milliseconds(30));
    }
    cout << endl;
}

// H√†m ch√≠nh
int main() {
    

    

    int luaChon;
    do {
        hieuUngVien();   // Hi·ªáu ·ª©ng vi·ªÅn m·ªü ƒë·∫ßu
        hienThiBanner(); // Hi·ªÉn th·ªã banner h·ªá th·ªëng
        hienThiMenu();   // Hi·ªÉn th·ªã menu ch·ª©c nƒÉng // Hi·ªÉn th·ªã giao di·ªán ng∆∞·ªùi d√πng
        cin>>luaChon;


        vector <PhieuKhamBenh> danhSachPhieu;
        // ƒê·ªçc file v√†o vector
        PhieuKhamBenh::docFile(danhSachPhieu);

        vector<DMThuoc> danhSachThuoc;
        DMThuoc::docFile(danhSachThuoc);

        vector<DMChuNuoi> danhSachChuNuoi;
        DMChuNuoi::docFile(danhSachChuNuoi);

        vector<LichTiemPhong> danhSachLichTiem;
        LichTiemPhong::docDuLieuTuFile(danhSachLichTiem, "LichTiemPhong.txt");
        
        // Khai b√°o vector doanh thu
        vector<DoanhThu> doanhThuNgay, doanhThuThang, doanhThuNam;

        switch (luaChon) {
            case 1:
                //nh·∫≠p th√™m d·ªØ li·ªáu m·ªõi
                break;
            case 2:
                DMChuNuoi::inDanhSachChuNuoi(danhSachChuNuoi);
                break;
            case 3:
                DMThuoc:: inDanhSachThuoc(danhSachThuoc);
                break;
            case 4:
                PhieuKhamBenh::inDanhSachPhieu(danhSachPhieu);
                break;
            case 5:
                PhieuKhamBenh::inPhieuCanTim(danhSachPhieu);
                break;
            case 6:
            

            // T√≠nh doanh thu
            tinhDoanhThu(danhSachPhieu, danhSachThuoc, doanhThuNgay, doanhThuThang, doanhThuNam);

            // Hi·ªÉn th·ªã th·ªëng k√™ doanh thu
            inThongKeDoanhThu(doanhThuNgay, "NG√ÄY");
            inThongKeDoanhThu(doanhThuThang, "TH√ÅNG");
            inThongKeDoanhThu(doanhThuNam, "NƒÇM");
                break;
            case 7:
            
            thongKeLoaiThuoc(danhSachPhieu, danhSachThuoc);
                break;
            case 8: {
                // t·∫°o b√°o c√°o kh√°m b·ªánh
                    inBaoCaoKhamBenh(danhSachPhieu);
                    break;
                }
            case 9: {
                //xu·∫•t phi·∫øu kh√°m b·ªánh ra file
                    PhieuKhamBenh::xuatPhieuKhamBenhRaFile(danhSachPhieu, "PhieuKhamBenh.csv");
                    break;
                }
            case 10:
            // l·ªãch nh·∫Øc ti√™m ph√≤ng
                LichTiemPhong::lichNhacTiemPhong(danhSachLichTiem);
                break;
            case 0:
                cout << "Tho√°t ch∆∞∆°ng tr√¨nh.\n";
                break;
            default:
                cout << "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng th·ª≠ l·∫°i.\n";
                break;
            
        }
        cout << "Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...\n";
        cin.ignore();
        cin.get();
    } while (luaChon != 0);

    
// int chon;
// cin>>chon;
// switch(chon)
// {
// case 1:
/*1. in danh s√°ch phi·∫øu kh√°m theo th·ªùi gian*/
//     vector <PhieuKhamBenh> danhSachPhieu;
//     // ƒê·ªçc file v√†o vector
//     PhieuKhamBenh::docFile(danhSachPhieu);

//     // In danh s√°ch
//     PhieuKhamBenh::inPhieuKhamBenh(danhSachPhieu);

// //     break;
// // case 2:

// /*2. t√¨m ki·∫øm v√† in phi·∫øu theo s·ªë phi·∫øu ƒë√£ nh·∫≠p*/
//     PhieuKhamBenh:: inPhieuCanTim(danhSachPhieu);

// //     break;
// // case 3:

// /*3. th·ªëng k√™ doanh thu theo ng√†y th√°ng nƒÉm*/

// vector<DMThuoc> danhSachThuoc;

// // ƒê·ªçc d·ªØ li·ªáu t·ª´ file
// DMThuoc::docFile(danhSachThuoc);


// // Khai b√°o vector doanh thu
// vector<DoanhThu> doanhThuNgay, doanhThuThang, doanhThuNam;

// // T√≠nh doanh thu
// tinhDoanhThu(danhSachPhieu, danhSachThuoc, doanhThuNgay, doanhThuThang, doanhThuNam);

// // Hi·ªÉn th·ªã th·ªëng k√™ doanh thu
// inThongKe(doanhThuNgay, "NG√ÄY");
// inThongKe(doanhThuThang, "TH√ÅNG");
// inThongKe(doanhThuNam, "NƒÇM");

    
// //     break;    

// // default:
// // cout <<"Tho√°t!";
// //  break;
// // }

// /*4. Th·ªëng k√™ lo·∫°i thu·ªëc ƒë∆∞·ª£c s·ª≠ d·ª•ng nhi·ªÅu nh·∫•t*/
// thongKeLoaiThuoc(danhSachPhieu, danhSachThuoc);



return 0;

}